# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1G6kkHVs-zZAxJFmNvfQt692Suo5rOOFk
"""
#Examples
x1=reconstructions_an[421]
x2=anomaly_test_data[421]
y=[1,2,3,4]

def Average(lst):
    return abs(sum(lst) / 10)

window_size=10
subwindows=int(140/window_size)
subgraphs=int(subwindows/2)
la=0
up=window_size
ps=0
percentaget=[0]*subwindows
error = [0]*140
error_re = [0]*140
first=1

for x in range(subwindows):
  total_loss_error= abs(np.square(np.subtract(x2,x1)).mean())
  x3= abs( np.square(np.subtract(x2[la:up],x1[la:up])).mean())
  if first==1:
    ps=x3
    first=2
  if x3>=ps:
    print(x3," is greater",ps)
    print("limits:", la, up )
    rs=x2[la:up]
    u_la=la
    u_up=up
    percentage=x3
    ps=x3  
    
  percentaget[x]=x3
  print("loss of window",x3)
  remaining_loss= (total_loss_error-x3)
  print("remaining loss",remaining_loss)
  if remaining_loss>threshold:
    print("culprit")
  else:
    la=la+window_size
    up=up+window_size

error[u_la:u_up]=rs
#error_re[u_la:u_up]=x1[u_la:u_up]
#plt.plot(x2, label='origional')
la=0
up=window_size
figure(figsize=(30, 6), dpi=80)
with plt.style.context('fivethirtyeight'):
  ax=plt.plot(x1)


  for j in range(subwindows):
    plt.vlines(x=up, ymin=0, ymax=1, colors='green', ls=':', lw=2, label='vline_single - partial height')
    plt.text(la,1, str(round(percentaget[j],9)))

  
      
      
    plt.title('XAI Result')
    la=la+window_size
    up=up+window_size
  max_index_col = np.argmax(percentaget, axis=0)
  a=10*max_index_col
  b=10*max_index_col+window_size
  plt.axvspan(a, b, color='red', alpha=0.5)
#plt.plot(error, label='predicted') 
#plt.axvspan(u_la,u_up, color='red', alpha=0.5)
#plt.plot(error_re)
#plt.legend()   
#plt.show
print("Percentage of Error by the segment",percentage)
print("Threshold:", threshold)
print("Reconstruction loss for given sample:", total_loss_error)
